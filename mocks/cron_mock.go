// Code generated by MockGen. DO NOT EDIT.
// Source: ./cron/types.go
//
// Generated by this command:
//
//	mockgen -source=./cron/types.go -destination=./mocks/cron_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	cron "cronlite/cron"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIJob is a mock of IJob interface.
type MockIJob struct {
	ctrl     *gomock.Controller
	recorder *MockIJobMockRecorder
	isgomock struct{}
}

// MockIJobMockRecorder is the mock recorder for MockIJob.
type MockIJobMockRecorder struct {
	mock *MockIJob
}

// NewMockIJob creates a new mock instance.
func NewMockIJob(ctrl *gomock.Controller) *MockIJob {
	mock := &MockIJob{ctrl: ctrl}
	mock.recorder = &MockIJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJob) EXPECT() *MockIJobMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockIJob) GetState() cron.IState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(cron.IState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockIJobMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockIJob)(nil).GetState))
}

// OnStateUpdated mocks base method.
func (m *MockIJob) OnStateUpdated(ctx context.Context, state *cron.JobState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStateUpdated", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStateUpdated indicates an expected call of OnStateUpdated.
func (mr *MockIJobMockRecorder) OnStateUpdated(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStateUpdated", reflect.TypeOf((*MockIJob)(nil).OnStateUpdated), ctx, state)
}

// Start mocks base method.
func (m *MockIJob) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIJobMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIJob)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockIJob) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIJobMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIJob)(nil).Stop), ctx)
}

// MockIWorkerIdProvider is a mock of IWorkerIdProvider interface.
type MockIWorkerIdProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerIdProviderMockRecorder
	isgomock struct{}
}

// MockIWorkerIdProviderMockRecorder is the mock recorder for MockIWorkerIdProvider.
type MockIWorkerIdProviderMockRecorder struct {
	mock *MockIWorkerIdProvider
}

// NewMockIWorkerIdProvider creates a new mock instance.
func NewMockIWorkerIdProvider(ctrl *gomock.Controller) *MockIWorkerIdProvider {
	mock := &MockIWorkerIdProvider{ctrl: ctrl}
	mock.recorder = &MockIWorkerIdProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerIdProvider) EXPECT() *MockIWorkerIdProviderMockRecorder {
	return m.recorder
}

// Id mocks base method.
func (m *MockIWorkerIdProvider) Id() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Id indicates an expected call of Id.
func (mr *MockIWorkerIdProviderMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockIWorkerIdProvider)(nil).Id))
}

// MockIState is a mock of IState interface.
type MockIState struct {
	ctrl     *gomock.Controller
	recorder *MockIStateMockRecorder
	isgomock struct{}
}

// MockIStateMockRecorder is the mock recorder for MockIState.
type MockIStateMockRecorder struct {
	mock *MockIState
}

// NewMockIState creates a new mock instance.
func NewMockIState(ctrl *gomock.Controller) *MockIState {
	mock := &MockIState{ctrl: ctrl}
	mock.recorder = &MockIStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIState) EXPECT() *MockIStateMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIState) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIStateMockRecorder) Delete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIState)(nil).Delete), ctx)
}

// Exists mocks base method.
func (m *MockIState) Exists(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIStateMockRecorder) Exists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIState)(nil).Exists), ctx)
}

// Get mocks base method.
func (m *MockIState) Get(ctx context.Context, force bool) (*cron.JobState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, force)
	ret0, _ := ret[0].(*cron.JobState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIStateMockRecorder) Get(ctx, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIState)(nil).Get), ctx, force)
}

// Save mocks base method.
func (m *MockIState) Save(ctx context.Context, state *cron.JobState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIStateMockRecorder) Save(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIState)(nil).Save), ctx, state)
}
