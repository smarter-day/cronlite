// Code generated by MockGen. DO NOT EDIT.
// Source: ./logger/logger.go
//
// Generated by this command:
//
//	mockgen -source=./logger/logger.go -destination=./mocks/logger_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
	isgomock struct{}
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockILogger) Debug(ctx context.Context, message string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", ctx, message, fields)
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug(ctx, message, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug), ctx, message, fields)
}

// Error mocks base method.
func (m *MockILogger) Error(ctx context.Context, message string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, message, fields)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(ctx, message, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), ctx, message, fields)
}

// Info mocks base method.
func (m *MockILogger) Info(ctx context.Context, message string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", ctx, message, fields)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(ctx, message, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), ctx, message, fields)
}

// SetLogLevel mocks base method.
func (m *MockILogger) SetLogLevel(level string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogLevel", level)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockILoggerMockRecorder) SetLogLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockILogger)(nil).SetLogLevel), level)
}

// Warning mocks base method.
func (m *MockILogger) Warning(ctx context.Context, message string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warning", ctx, message, fields)
}

// Warning indicates an expected call of Warning.
func (mr *MockILoggerMockRecorder) Warning(ctx, message, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockILogger)(nil).Warning), ctx, message, fields)
}
