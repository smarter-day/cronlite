// Code generated by MockGen. DO NOT EDIT.
// Source: ./cron/state.go
//
// Generated by this command:
//
//	mockgen -source=./cron/state.go -destination=./mocks/cron_state_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	cron "cronlite/cron"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIState is a mock of IState interface.
type MockIState struct {
	ctrl     *gomock.Controller
	recorder *MockIStateMockRecorder
	isgomock struct{}
}

// MockIStateMockRecorder is the mock recorder for MockIState.
type MockIStateMockRecorder struct {
	mock *MockIState
}

// NewMockIState creates a new mock instance.
func NewMockIState(ctrl *gomock.Controller) *MockIState {
	mock := &MockIState{ctrl: ctrl}
	mock.recorder = &MockIStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIState) EXPECT() *MockIStateMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIState) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIStateMockRecorder) Delete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIState)(nil).Delete), ctx)
}

// Exists mocks base method.
func (m *MockIState) Exists(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIStateMockRecorder) Exists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIState)(nil).Exists), ctx)
}

// Get mocks base method.
func (m *MockIState) Get(ctx context.Context, force bool) (*cron.CronJobState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, force)
	ret0, _ := ret[0].(*cron.CronJobState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIStateMockRecorder) Get(ctx, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIState)(nil).Get), ctx, force)
}

// Save mocks base method.
func (m *MockIState) Save(ctx context.Context, state *cron.CronJobState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIStateMockRecorder) Save(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIState)(nil).Save), ctx, state)
}
